package edu.oregonstate.domains.eecb.reader;

import edu.stanford.nlp.trees.Span;

/**
 * Every Token in the EECB corpus
 * 
 * @author Jun Xie (xie@eecs.oregonstate.edu)
 *
 */
public class EecbToken {

	/** the actual token bytes
	 * Normally we work with mWord (see below), but mLiteral is needed when
	 * we need to check if a sequence of tokens exists in a gazetteer 
	 */
	private String mLiteral;
	
	/** suffixes of mWord */
	private int mCase;
	
	/** 
	 * The reason for this is that we extract the annotation according to the span of tokens
	 * Span of tokens that match this char sequence 
	 */
	private Span mTokenOffset;
	
	private int mSentence;
	
	public int getSentence() {
	    return mSentence;
	}
	
	private String mLemma;
	
	public String getLiteral() {
	    return mLiteral;
	}
	
	public String getLamma() {
		return mLemma;
	}
	
	public Span getTokenOffset() {
		return mTokenOffset;
	}
	
	public int getTokenStart() {
	    if (mTokenOffset == null)
	      return -1;
	    return mTokenOffset.start();
	}

	public int getTokenEnd() {
	    if (mTokenOffset == null)
	      return -1;
	    return mTokenOffset.end();
	}
	
	public static final int CASE_OTHER = 0;
	public static final int CASE_ALLCAPS = 1;
	public static final int CASE_ALLCAPSORDOTS = 2;
	public static final int CASE_CAPINI = 3;
	public static final int CASE_INCAP = 4;
	public static final int CASE_ALLDIGITS = 5;
	public static final int CASE_ALLDIGITSORDOTS = 6;
	
	private int detectCase(String word) {

	    //
	    // is the word all caps? (e.g. IBM)
	    //
	    boolean isAllCaps = true;
	    for (int i = 0; i < word.length(); i++) {
	      if (!Character.isUpperCase(word.charAt(i))) {
	        isAllCaps = false;
	        break;
	      }
	    }
	    if (isAllCaps)
	      return CASE_ALLCAPS;

	    //
	    // is the word all caps or dots?(e.g. I.B.M.)
	    //
	    boolean isAllCapsOrDots = true;
	    if (Character.isUpperCase(word.charAt(0))) {
	      for (int i = 0; i < word.length(); i++) {
	        if (!Character.isUpperCase(word.charAt(i)) && word.charAt(i) != '.') {
	          isAllCapsOrDots = false;
	          break;
	        }
	      }
	    } else {
	      isAllCapsOrDots = false;
	    }
	    if (isAllCapsOrDots)
	      return CASE_ALLCAPSORDOTS;

	    //
	    // does the word start with a cap?(e.g. Tuesday)
	    //
	    boolean isInitialCap = false;
	    if (Character.isUpperCase(word.charAt(0)))
	      isInitialCap = true;
	    if (isInitialCap)
	      return CASE_CAPINI;

	    //
	    // does the word contain a capitalized letter?
	    //
	    boolean isInCap = false;
	    for (int i = 1; i < word.length(); i++) {
	      if (Character.isUpperCase(word.charAt(i))) {
	        isInCap = true;
	        break;
	      }
	    }
	    if (isInCap)
	      return CASE_INCAP;

	    //
	    // is the word all digits? (e.g. 123)
	    //
	    boolean isAllDigits = false;
	    for (int i = 0; i < word.length(); i++) {
	      if (!Character.isDigit(word.charAt(i))) {
	        isAllDigits = false;
	        break;
	      }
	    }
	    if (isAllDigits)
	      return CASE_ALLDIGITS;

	    //
	    // is the word all digits or . or ,? (e.g. 1.3)
	    //
	    boolean isAllDigitsOrDots = true;
	    if (Character.isDigit(word.charAt(0))) {
	      for (int i = 0; i < word.length(); i++) {
	        if (!Character.isDigit(word.charAt(i)) && word.charAt(i) != '.' && word.charAt(i) != ',') {
	          isAllDigitsOrDots = false;
	          break;
	        }
	      }
	    } else {
	      isAllDigitsOrDots = false;
	    }
	    if (isAllDigitsOrDots)
	      return CASE_ALLDIGITSORDOTS;

	    return CASE_OTHER;
	  }
	
	/**
	 * Constructs an AceToken from a tokenized line generated by Tokey
	 */
	public EecbToken(String word, String lemma, String start, String end, int sentence) {
	    mLiteral = word;
	    if (word == null) {
	        mCase = -1;
	    } else {
	        mCase = detectCase(word);
	    }
	    mLemma = lemma;
	    if (start != null && end != null) {
	    	mTokenOffset = new Span(Integer.parseInt(start), Integer.parseInt(end));
	    }
	    mSentence = sentence;
	}
	
	@Override
	public String toString() {
		return "[" + mLiteral + ", " + mLemma + ", " + mTokenOffset.start() + ", " + mTokenOffset.end() + ", " + Integer.toString(mSentence) + "]";
	}
	
}