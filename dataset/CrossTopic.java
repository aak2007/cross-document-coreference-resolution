package edu.oregonstate.dataset;

import java.util.Properties;

import edu.oregonstate.experiment.ExperimentConstructor;
import edu.oregonstate.dataset.IDataSet;
import edu.oregonstate.io.ResultOutput;
import edu.oregonstate.util.EecbConstants;
import edu.stanford.nlp.dcoref.CorefCluster;
import edu.stanford.nlp.dcoref.Document;

/**
 * Based on the topic Document object, incorporate the SRL predicate and their arguments 
 * with the predicted mentions generated by Rule based mention detection component.
 * 
 * @author Jun Xie (xie@eecs.oregonstate.edu)
 *
 */

public class CrossTopic implements IDataSet {

	/** corpus path */
	private final String dataPath;

	/* Log File Path */
	private final String logFile;

	/* experiment properties file */
	private final Properties mProps;

	/* experiment result folder */
	private final String experimentResultFolder;

	/* corpus path */
	private final String corpusPath;
	
	/* enable Stanford pre-process step during data generation */
	private final boolean enableStanfordPreprocessStep;

	/** used for scoring */
	//private static final Logger logger = Logger.getLogger(WithinCross.class.getName());

	public CrossTopic() {
		mProps = ExperimentConstructor.experimentProps;
		logFile = ExperimentConstructor.logFile;
		experimentResultFolder = ExperimentConstructor.resultPath;
		corpusPath = ExperimentConstructor.corpusPath;
		dataPath = corpusPath + "/EECB1.0/data/";
		enableStanfordPreprocessStep = Boolean.parseBoolean(mProps.getProperty(EecbConstants.STANFORD_PREPROCESSING, "true"));
	}

	@Override
	public Document getData(String topic, boolean goldOnly) {
		String currentExperimentFolder = experimentResultFolder + "/" + topic;
		String statisticsPath = currentExperimentFolder + "/" + "statistics";

		Document document = new Document();

		try{
			String path = dataPath + topic + "/";
			ResultOutput.writeTextFile(ExperimentConstructor.logFile, topic + " : " + path);
			document = getDocument(topic, goldOnly);
			ResultOutput.writeTextFile(statisticsPath, topic + " " + document.allGoldMentions.size() + " " + document.goldCorefClusters.size() + " " + document.allPredictedMentions.size() + " " +
					document.corefClusters.size());

			document.setID(topic);
			document.fill();                                // incorporate SYNONYM

			// generate feature for each cluster
			for (Integer id : document.corefClusters.keySet()) {
				CorefCluster cluster = document.corefClusters.get(id);
				cluster.regenerateFeature();
			}

		} catch (Exception e) {
			throw new RuntimeException(e);
		}

		return document;
	}
	
	/** treat the topic as a whole */
	private Document getDocument(String path, boolean goldOnly) {
		CorefSystem cs = new CorefSystem();
		Document document = new Document();
		try {
			document = cs.getDocument(path, goldOnly);
			
			// whether enable stanford pre-process step during data generation
			if (enableStanfordPreprocessStep) {
				cs.getCorefSystem().coref(document);
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		
		return document;
	}
	
}
